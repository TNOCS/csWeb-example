{
    "swagger": "2.0",
    "info": {
        "description": "This is the Swagger documentation for the Common Sense API. You can find out more about the Common Sense project by going to [https://github.com/TNOCS/csWeb](https://github.com/TNOCS/csWeb) or by joining our [slack hangout](https://webcs.slack.com/). We welcome collaboration! This API documentation page was made with Swagger. You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).",
        "version": "0.1.0",
        "title": "Common Sense API"
    },
    "host": "localhost:3002",
    "basePath": "/api",
    "tags": [{
        "name": "layer",
        "description": "All operations concerning layers (FeatureCollections)",
        "externalDocs": {
            "description": "Find out more",
            "url": "https://github.com/TNOCS/csWeb/wiki/API-Documentation"
        }
    }, {
        "name": "feature",
        "description": "All operations concerning features",
        "externalDocs": {
            "description": "Find out more",
            "url": "https://github.com/TNOCS/csWeb/wiki/API-Documentation"
        }
    }, {
        "name": "project",
        "description": "All operations concerning projects",
        "externalDocs": {
            "description": "Find out more",
            "url": "https://github.com/TNOCS/csWeb/wiki/API-Documentation"
        }
    }, {
        "name": "log",
        "description": "All operations concerning log files",
        "externalDocs": {
            "description": "Find out more",
            "url": "https://github.com/TNOCS/csWeb/wiki/API-Documentation"
        }
    }, {
        "name": "resource",
        "description": "All resource operations",
        "externalDocs": {
            "description": "Find out more",
            "url": "https://github.com/TNOCS/csWeb/wiki/API-Documentation"
        }
    }, {
        "name": "special",
        "description": "All special operations",
        "externalDocs": {
            "description": "Find out more",
            "url": "https://github.com/TNOCS/csWeb/wiki/API-Documentation"
        }
    }],
    "schemes": [
        "http"
    ],
    "paths": {
        "/resources/{resourceId}": {
            "post": {
                "tags": [
                    "resource"
                ],
                "summary": "Add resource",
                "description": "Adds a single resource",
                "operationId": "addResource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "Resource object that needs to be added to the datastorage",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Resource"
                    }
                }],
                "responses": {
                    "429": {
                        "description": "ResourceId already exists"
                    },
                    "200": {
                        "description": "ResourceId added"
                    }
                }
            }
        },
        "/resources/{resourceId}": {
            "get": {
                "tags": [
                    "resource"
                ],
                "summary": "Find resource by ID",
                "description": "Returns a single resource",
                "operationId": "getResource",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "resourceId",
                    "in": "path",
                    "description": "ID of the resource to be returned",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Resource"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "428": {
                        "description": "Resource not found"
                    }
                }
            }
        },
        "/projects/{projectId}/group/{groupId}/layer/{layerId}": {
            "post": {
                "tags": [
                    "project"
                ],
                "summary": "Adds a layer to a project",
                "description": "Adds a layer to a project",
                "operationId": "addLayerToProject",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "projectId",
                    "in": "path",
                    "description": "ID of the project to add the layer to",
                    "required": true,
                    "type": "string"
                }, {
                    "in": "path",
                    "name": "groupId",
                    "description": "id of the group to add the layer to",
                    "required": true,
                    "type": "string"
                }, {
                    "in": "path",
                    "name": "layerId",
                    "description": "id of the layer that will be added",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "406": {
                        "description": "Layer exists"
                    },
                    "407": {
                        "description": "Layer not found"
                    },
                    "410": {
                        "description": "Project not found"
                    },
                    "412": {
                        "description": "Group not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "project"
                ],
                "summary": "Deletes a layer from a project",
                "description": "Deletes a layer from a project",
                "operationId": "removeLayerFromProject",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "projectId",
                    "in": "path",
                    "description": "ID of the project to remove the layer from",
                    "required": true,
                    "type": "string"
                }, {
                    "in": "path",
                    "name": "groupId",
                    "description": "id of the group to add the layer to",
                    "required": true,
                    "type": "string"
                }, {
                    "in": "path",
                    "name": "layerId",
                    "description": "id of the layer that will be removed",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "407": {
                        "description": "Layer not found"
                    },
                    "410": {
                        "description": "Project not found"
                    },
                    "412": {
                        "description": "Group not found"
                    }
                }
            }
        },
        "/projects/{projectId}/group/{groupId}": {
            "delete": {
                "tags": [
                    "project"
                ],
                "summary": "Deletes a group from a project",
                "description": "Deletes a group from a project",
                "operationId": "removeGroup",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "projectId",
                    "in": "path",
                    "description": "ID of the project to remove the layer from",
                    "required": true,
                    "type": "string"
                }, {
                    "in": "path",
                    "name": "groupId",
                    "description": "id of the group that will be removed",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "412": {
                        "description": "Group not found"
                    },
                    "410": {
                        "description": "Project not found"
                    }
                }
            }
        },
        "/projects/{projectId}/group/": {
            "post": {
                "tags": [
                    "project"
                ],
                "summary": "Create a group in a project",
                "description": "Create a group in a project",
                "operationId": "addGroupToProject",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "projectId",
                    "in": "path",
                    "description": "ID of the project to add the group to",
                    "required": true,
                    "type": "string"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON that will be used to create the group",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Group"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "413": {
                        "description": "Group exists"
                    },
                    "410": {
                        "description": "Project not found"
                    }
                }
            },
            "get": {
                "tags": [
                    "project"
                ],
                "summary": "Returns all groups in a project",
                "description": "Returns a list of groupIds in a project",
                "operationId": "allGroups",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "projectId",
                    "in": "path",
                    "description": "ID of the project to get the groups from",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot get groups"
                    }
                }
            }
        },
        "/projects/{projectId}": {
            "put": {
                "tags": [
                    "project"
                ],
                "summary": "Update an existing project",
                "description": "",
                "operationId": "updateProject",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON that will be used to update the project",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Project"
                    }
                }, {
                    "name": "projectId",
                    "in": "path",
                    "description": "ID or Name of the project to update",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "410": {
                        "description": "Project not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "get": {
                "tags": [
                    "project"
                ],
                "summary": "Find project by ID",
                "description": "Returns a single project",
                "operationId": "getProject",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "projectId",
                    "in": "path",
                    "description": "ID of the project to be returned",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "410": {
                        "description": "Project not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "project"
                ],
                "summary": "Delete a project by ID",
                "description": "Deletes an entire project",
                "operationId": "deleteProject",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "projectId",
                    "in": "path",
                    "description": "ID of project to be deleted",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "410": {
                        "description": "project not found"
                    }
                }
            }
        },
        "/projects/": {
            "post": {
                "tags": [
                    "project"
                ],
                "summary": "Add a new project to the system",
                "description": "Adds a new project",
                "operationId": "addProject",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "Project object that needs to be added to the datastorage",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Project"
                    }
                }],
                "responses": {
                    "409": {
                        "description": "ProjectId already exists"
                    }
                }
            },
            "get": {
                "tags": [
                    "project"
                ],
                "summary": "Returns all projects",
                "description": "Returns a list of projects",
                "operationId": "allProjects",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/Project"
                            }
                        }
                    },
                    "404": {
                        "description": "Cannot get projects"
                    }
                }
            }
        },
        "/layers/{layerId}": {
            "put": {
                "tags": [
                    "layer"
                ],
                "summary": "Update an existing layer",
                "description": "",
                "operationId": "updateLayer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON that will be used to update the layer",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Feature"
                    }
                }, {
                    "name": "layerId",
                    "in": "path",
                    "description": "ID or Name of the Layer to update",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Layer not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "get": {
                "tags": [
                    "layer"
                ],
                "summary": "Find layer by ID",
                "description": "Returns a single layer",
                "operationId": "getLayer",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "layerId",
                    "in": "path",
                    "description": "ID of the layer to be returned",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Layer"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "407": {
                        "description": "Layer not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "layer"
                ],
                "summary": "Delete a layer by ID",
                "description": "Deletes an entire layer",
                "operationId": "deleteLayer",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "layerId",
                    "in": "path",
                    "description": "ID of layer to be deleted",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Layer not found"
                    }
                }
            }
        },
        "/search/":{
            "get": {
                "tags": [
                    "layer", "search"
                ],
                "summary": "Searches for a keyword inside a list or all layers",
                "description": "Searches for a keyword inside a list or all layers",
                "operationId": "search",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/Layer"
                            }
                        }

                    },
                    "404": {
                        "description": "Cannot GET /search/"
                    }
                }
            }
        },
        "/layers/": {
            "post": {
                "tags": [
                    "layer"
                ],
                "summary": "Add a new layer to the system",
                "description": "Adds a new layer",
                "operationId": "addLayer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "Layer object that needs to be added to the datastorage",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Layer"
                    }
                }],
                "responses": {
                    "406": {
                        "description": "LayerId already exists"
                    }
                }
            },
            "get": {
                "tags": [
                    "layer"
                ],
                "summary": "Returns a list of all layers and their associated storage engine",
                "description": "Returns a list of all layers and their associated storage",
                "operationId": "allLayers",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/Layer"
                            }

                        }

                    },
                    "404": {
                        "description": "Cannot GET /layers/"
                    }
                }
            }
        },
        "/layers/{layerId}/feature/{featureId}": {
            "put": {
                "tags": [
                    "feature"
                ],
                "summary": "Update a single pre-existing feature",
                "description": "",
                "operationId": "updateFeature",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON that will be used to update the feature",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Feature"
                    }
                }, {
                    "name": "layerId",
                    "in": "path",
                    "description": "ID or Name of the Layer to update",
                    "required": true,
                    "type": "string"
                }, {
                    "name": "featureId",
                    "in": "path",
                    "description": "ID of the feature to update",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Feature not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "get": {
                "tags": [
                    "feature"
                ],
                "summary": "Find feature by ID",
                "description": "Returns a single feature",
                "operationId": "getFeature",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "featureId",
                    "in": "path",
                    "description": "ID of the feature to be returned",
                    "required": true,
                    "type": "string"
                }, {
                    "name": "layerId",
                    "in": "path",
                    "description": "ID of the layer in which the feature is located",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Feature"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Layer or feature not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "feature"
                ],
                "summary": "Delete a feature by ID",
                "description": "Deletes an entire layer",
                "operationId": "deleteFeature",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "featureId",
                    "in": "path",
                    "description": "ID of feature to be deleted",
                    "required": true,
                    "type": "string"
                }, {
                    "name": "layerId",
                    "in": "path",
                    "description": "ID of the layer where the feature is located",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Layer or feature not found"
                    }
                }
            }
        },
        "/layers/{layerId}/feature": {
            "post": {
                "tags": [
                    "feature"
                ],
                "summary": "Adds a feature",
                "description": "",
                "operationId": "addFeature",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "layerId",
                    "in": "path",
                    "description": "ID of layer to add the feature to",
                    "required": true,
                    "type": "string"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON that will be used to insert the feature",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Feature"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            }
        },
        "/layers/{layerId}/{featureId}/log": {
            "put": {
                "tags": [
                    "log"
                ],
                "summary": "Adds a log to a feature by updating it with a log",
                "description": "",
                "operationId": "addLog",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON that will be used to update the feature",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Log"
                    }
                }, {
                    "name": "layerId",
                    "in": "path",
                    "description": "ID or Name of the Layer to update",
                    "required": true,
                    "type": "string"
                }, {
                    "name": "featureId",
                    "in": "path",
                    "description": "ID of the feature to update with the log",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "400": {
                        "description": "Invalid IDs supplied"
                    },
                    "404": {
                        "description": "Feature not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "get": {
                "tags": [
                    "log"
                ],
                "summary": "Find the log file associated with a single feature",
                "description": "Returns all logs associated with a feature",
                "operationId": "getLog",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "featureId",
                    "in": "path",
                    "description": "ID of the feature to be returned",
                    "required": true,
                    "type": "string"
                }, {
                    "name": "layerId",
                    "in": "path",
                    "description": "ID of the layer in which the feature is located",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Log"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Layer or feature not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "log"
                ],
                "summary": "Delete a log by supplying timestamp, value, and IDs",
                "description": "Deletes a log by supplying the API with values for the TimeStamp, property name, and layer/feature identifiers",
                "operationId": "deleteLog",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "featureId",
                    "in": "path",
                    "description": "ID of feature to be deleted",
                    "required": true,
                    "type": "string"
                }, {
                    "name": "layerId",
                    "in": "path",
                    "description": "ID of the layer where the feature is located",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid IDs supplied"
                    },
                    "404": {
                        "description": "Layer, log, or feature not found"
                    }
                }
            }
        },
        "/layers/{layerId}/bbox": {
            "get": {
                "tags": [
                    "special"
                ],
                "summary": "Gets all and any points in a (bounding box) rectangle.",
                "description": "Takes two lng/lat pairs as input. These MUST be the south-west (bottom left) and northeast (top right) coordinates expressed as floating point numbers.",
                "operationId": "bbox",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "swlng",
                    "in": "query",
                    "description": "Southwestern longtitude used to calculate the bbox",
                    "required": true,
                    "type": "number",
                    "format": "float"
                }, {
                    "name": "swlat",
                    "in": "query",
                    "description": "Southwestern latitude used to calculate the bbox",
                    "required": true,
                    "type": "number",
                    "format": "float"
                }, {
                    "name": "nelng",
                    "in": "query",
                    "description": "Northeastern longtitude used to calculate the bbox",
                    "required": true,
                    "type": "number",
                    "format": "float"
                }, {
                    "name": "nelat",
                    "in": "query",
                    "description": "Northeastern latitude used to calculate the bbox",
                    "required": true,
                    "type": "number",
                    "format": "float"
                }, {
                    "name": "layerId",
                    "in": "path",
                    "description": "ID of the layer",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Layer not found"
                    }
                }
            }
        },
        "/layers/{layerId}/getsphere": {
            "get": {
                "tags": [
                    "special"
                ],
                "summary": "Gets all and any points in a sphere defined by its center coordinate.",
                "description": "takes the center coordinate (Lat:lng) and distance (radius) as arguments to provide a list of coordinates starting with the closest coordinates to the center.",
                "operationId": "getsphere",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "lng",
                    "in": "query",
                    "description": "Longtitude used to calculate the sphere",
                    "required": true,
                    "type": "number",
                    "format": "float"
                }, {
                    "name": "lat",
                    "in": "query",
                    "description": "Latitude used to calculate the sphere",
                    "required": true,
                    "type": "number",
                    "format": "float"
                }, {
                    "name": "Distance",
                    "in": "query",
                    "description": "Max distane in meters",
                    "required": true,
                    "type": "number",
                    "format": "float"
                }, {
                    "name": "layerId",
                    "in": "path",
                    "description": "ID of the layer",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Layer not found"
                    }
                }
            }
        },
        "/layers/{layerId}/getwithinpolygon": {
            "get": {
                "tags": [
                    "special"
                ],
                "summary": "Gets all and any points that are within a user-supplied polygon in a GeoJSON document.",
                "description": "Takes a GeoJSON specification compliant document as input. This method can be used to determine the points within a special area, such as municipial borders.",
                "operationId": "getwithinpolygon",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "feature",
                    "description": "JSON that will be used to query the layer",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Feature"
                    }
                }, {
                    "name": "layerId",
                    "in": "path",
                    "description": "ID of the layer",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Layer not found"
                    }
                }
            }
        }
    },
    "definitions": {
        "FeatureTypeStyle": {
            "type": "object",
            "properties": {
                "nameLabel": {
                    "type": "string"
                },
                "fillColor": {
                    "type": "string"
                },
                "strokeColor": {
                    "type": "string"
                },
                "selectedFillColor": {
                    "type": "string"
                },
                "selectedStrokeColor": {
                    "type": "string"
                },
                "selectedStrokeWidth": {
                    "type": "number"
                },
                "height": {
                    "type": "number"
                },
                "opacity": {
                    "type": "number"
                },
                "fillOpacity": {
                    "type": "number"
                },
                "stroke": {
                    "type": "number"
                },
                "drawingMode": {
                    "type": "string"
                },
                "strokeWidth": {
                    "type": "number"
                },
                "iconWidth": {
                    "type": "number"
                },
                "iconHeight": {
                    "type": "number"
                },
                "iconUri": {
                    "type": "string"
                },
                "cornerRadius": {
                    "type": "number"
                },
                "maxTitleResolution": {
                    "type": "number"
                },
                "rotate": {
                    "type": "number"
                },
                "innerTextProperty": {
                    "type": "number"
                },
                "innerTextSize": {
                    "type": "number"
                },
                "rotateProperty": {
                    "type": "string"
                }
            }
        },
        "FeatureType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "showAllProperties": {
                    "type": "boolean"
                },
                "style": {
                    "$ref": "#/definitions/FeatureTypeStyle"
                },
                "propertyTypeKeys": {
                    "type": "string"
                }
            }
        },
        "PropertyType": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "section": {
                    "type": "string"
                },
                "stringFormat": {
                    "type": "number"
                },
                "visibleInCallout": {
                    "type": "number"
                },
                "canEdit": {
                    "type": "boolean"
                },
                "filterType": {
                    "type": "string"
                },
                "isSearchable": {
                    "type": "boolean"
                },
                "minValue": {
                    "type": "number"
                },
                "maxValue": {
                    "type": "number"
                },
                "defaultValue": {
                    "type": "number"
                }
            }
        },
        "Resource": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                },
                "featureTypes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/FeatureType"
                    }
                },
                "propertyTypeData": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PropertyType"
                    }
                }
            }
        },
        "Geometry": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"

                },
                "coordinates": {
                    "type": "object"
                }
            }
        },
        "Log": {
            "type": "object",
            "properties": {
                "ts": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1436952578422
                },
                "prop": {
                    "type": "string",
                    "example": "Name"
                },
                "value": {
                    "type": "object",
                    "example": "The Rijksmuseum"
                }
            }
        },
        "Feature": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "geometry": {
                    "$ref": "#/definitions/Geometry"
                },
                "type": {
                    "type": "string"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "logs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/Log"
                        }
                    }
                }
            }
        },
        "Layer": {
            "type": "object",
            "required": [
                "type",
                "features"
            ],
            "properties": {
                "storage": {
                    "type": "string",
                    "example": "file"
                },
                "useLog": {
                    "type": "boolean",
                    "default": false
                },
                "features": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Feature"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "nameOfYourCollection"
                },
                "updated": {
                    "type": "number"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dynamic": {
                    "type": "boolean",
                    "default": false
                },
                "title": {
                    "type": "string",
                    "example": "Test"
                },
                "type": {
                    "type": "string",
                    "example": "FeatureCollection"
                },
                "url": {
                    "type": "string",
                    "example": "Your resource's location"
                },
                "description": {
                    "type": "string",
                    "example": "This is a test"
                },
                "defaultFeatureType": {
                    "type": "string"
                },
                "typeUrl": {
                    "type": "string"
                }
            }
        },
        "Group": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "clustering": {
                    "type": "boolean"
                },
                "layers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Layer"
                    }
                }
            }
        },
        "Project": {
            "type": "object",
            "properties": {
                "storage": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "connected": {
                    "type": "boolean"
                },
                "logo": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Group"
                    }
                }
            }
        },
        "ApiResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "type": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about the Common Sense API",
        "url": "https://github.com/TNOCS/csWeb/wiki/API-Documentation"
    }
}
